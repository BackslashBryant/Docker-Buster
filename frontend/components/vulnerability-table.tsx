"use client"

import React from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { useState } from "react"
import { ChevronDown, ChevronUp, Info } from "lucide-react"

// Sample vulnerability data - used as fallback if no props are provided
const sampleVulnerabilities = [
  {
    id: "CVE-2023-0286",
    component: "openssl",
    version: "1.1.1k-1",
    severity: "critical",
    description:
      "A timing side channel in the RSA Decryption implementation that could allow an attacker to recover the private key in certain scenarios.",
    fix_version: "1.1.1t-1",
  },
  {
    id: "CVE-2022-37434",
    component: "zlib",
    version: "1.2.11-4",
    severity: "high",
    description:
      "Memory corruption in deflate implementation when processing certain input data that could lead to arbitrary code execution.",
    fix_version: "1.2.12-1",
  },
  {
    id: "CVE-2022-42898",
    component: "libxml2",
    version: "2.9.10-6",
    severity: "medium",
    description:
      "Use-after-free vulnerability in xmlXIncludeDoProcess that could lead to denial of service or information disclosure.",
    fix_version: "2.9.14-1",
  },
  {
    id: "CVE-2022-1304",
    component: "e2fsprogs",
    version: "1.46.2-2",
    severity: "medium",
    description: "Out-of-bounds write in e2fsck which could allow for privilege escalation or denial of service.",
    fix_version: "1.46.5-1",
  },
  {
    id: "CVE-2022-29458",
    component: "ncurses",
    version: "6.2-1",
    severity: "low",
    description: "Stack-based buffer overflow in _nc_captoinfo that could lead to denial of service.",
    fix_version: "6.3-1",
  },
]

export type Vulnerability = {
  id: string
  component: string
  version: string
  severity: string
  description: string
  fix_version?: string
}

interface VulnerabilityTableProps {
  vulnerabilities?: Vulnerability[]
}

export function VulnerabilityTable({ vulnerabilities = sampleVulnerabilities }: VulnerabilityTableProps) {
  const [expandedRow, setExpandedRow] = useState<string | null>(null)

  const toggleRow = (id: string) => {
    if (expandedRow === id) {
      setExpandedRow(null)
    } else {
      setExpandedRow(id)
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return "bg-red-900 hover:bg-red-800 text-red-300"
      case "high":
        return "bg-orange-900 hover:bg-orange-800 text-orange-300"
      case "medium":
        return "bg-yellow-900 hover:bg-yellow-800 text-yellow-300"
      case "low":
        return "bg-blue-900 hover:bg-blue-800 text-blue-300"
      default:
        return "bg-gray-900 hover:bg-gray-800 text-gray-300"
    }
  }

  return (
    <div className="rounded-md border border-gray-700 bg-[#252538] overflow-hidden">
      <Table>
        <TableHeader>
          <TableRow className="border-gray-700 hover:bg-transparent">
            <TableHead className="text-sm font-medium text-gray-400 px-4 py-3">CVE ID</TableHead>
            <TableHead className="text-sm font-medium text-gray-400 px-4 py-3">Package</TableHead>
            <TableHead className="text-sm font-medium text-gray-400 px-4 py-3">Version</TableHead>
            <TableHead className="text-sm font-medium text-gray-400 px-4 py-3">Severity</TableHead>
            <TableHead className="text-sm font-medium text-gray-400 px-4 py-3">Description</TableHead>
            <TableHead className="text-sm font-medium text-gray-400 px-4 py-3">Fixed In</TableHead>
            <TableHead className="text-sm font-medium text-gray-400 w-10 px-4 py-3"></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerabilities.map((vuln, index) => (
            <React.Fragment key={vuln.id + index}>
              <TableRow
                className={`border-gray-700 hover:bg-[#2f2f45] ${index % 2 === 0 ? "bg-[#2a2a3d]" : "bg-[#252538]"}`}
              >
                <TableCell className="font-mono px-4 py-3">{vuln.id}</TableCell>
                <TableCell className="px-4 py-3">{vuln.component}</TableCell>
                <TableCell className="font-mono px-4 py-3">{vuln.version}</TableCell>
                <TableCell className="px-4 py-3">
                  <Badge className={`${getSeverityColor(vuln.severity)} flex items-center justify-center`}>
                    {vuln.severity?.toUpperCase() || "UNKNOWN"}
                  </Badge>
                </TableCell>
                <TableCell className="max-w-xs px-4 py-3">
                  <div className="flex items-center">
                    <span className="truncate" title={vuln.description}>
                      {vuln.description}
                    </span>
                    <button
                      className="ml-2 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-[#2a2a3d] rounded-full p-1 transition-all duration-200"
                      title="View full description"
                      onClick={() => toggleRow(vuln.id)}
                      tabIndex={0}
                      aria-label={`View full description of ${vuln.id}`}
                    >
                      <Info size={16} />
                    </button>
                  </div>
                </TableCell>
                <TableCell className="font-mono px-4 py-3">{vuln.fix_version || "N/A"}</TableCell>
                <TableCell className="px-4 py-3">
                  <button
                    onClick={() => toggleRow(vuln.id)}
                    className="p-1 rounded-full hover:bg-gray-700 text-gray-400 hover:text-white transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-[#2a2a3d]"
                    tabIndex={0}
                    aria-label={expandedRow === vuln.id ? "Collapse details" : "Expand details"}
                    aria-expanded={expandedRow === vuln.id}
                  >
                    {expandedRow === vuln.id ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
                  </button>
                </TableCell>
              </TableRow>
              {expandedRow === vuln.id && (
                <TableRow className={`border-gray-700 ${index % 2 === 0 ? "bg-[#2a2a3d]/50" : "bg-[#252538]/50"}`}>
                  <TableCell colSpan={7} className="p-4">
                    <div className="bg-[#1e1e2f] p-4 rounded-md">
                      <h4 className="font-bold mb-2">{vuln.id} - Full Description</h4>
                      <p className="text-gray-300">{vuln.description}</p>
                    </div>
                  </TableCell>
                </TableRow>
              )}
            </React.Fragment>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}
